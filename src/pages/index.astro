---
import Layout from '../layouts/Layout.astro';
import Presentation from './Presentation.astro';
import Intro from './Intro.astro';
import OurStory from './OurStory.astro';
import Info from './Info.astro';
import LluviaSobres from './LluviaSobres.astro';
import DressCode from './DressCode.astro';
import MusicaMensaje from './MusicaMensaje.astro'
import Rsvp from './Rsvp.astro'
import '@fontsource/great-vibes';
import '@fontsource-variable/montserrat';


const { tipo = "", id = "" } = Astro.props;
---

<Layout>
	<section class="seccion seccion-presentation" id="presentation" data-index="-1" data-status="active">
		<Presentation tipo={tipo} id={id}></Presentation>
	</section>
	<section class="seccion seccion-intro" id="intro" data-index="0" data-status="unknown">
		<Intro></Intro>
	</section>
	<section class="seccion seccion-our-story" id="our-story" data-index="1" data-status="unknown">
		<OurStory></OurStory>
	</section>
	<section class="seccion seccion-info" id="info" data-index="2" data-status="unknown">
		<Info></Info>
	</section>
	<section class="seccion seccion-dresscode" id="dress-code" data-index="3" data-status="unknown">
		<DressCode></DressCode>
	</section>
	<section class="seccion seccion-lluvia" id="lluvia" data-index="4" data-status="unknown">
		<LluviaSobres></LluviaSobres>
	</section>
	<section class="seccion seccion-musica-mensaje" id="musica-mensaje" data-index="-2" data-status="unknown">
		<MusicaMensaje tipo={tipo} id={id}></MusicaMensaje>
	</section>
	<section class="seccion seccion-rsvp" id="rsvp" data-index="6" data-status="unknown">
		<Rsvp tipo={tipo} id={id}></Rsvp>
	</section>
</Layout>

<style>

	/* 1920×1080 (9.94%)
	1536×864 (3.94%)
	1366×768 (6.22%)
	414×896 (4.21%)
	375×667 (3.74%) 
	360×640 (5.88%) */

	.seccion {
		width: 100vw;
		height: 100vh;
		position: absolute;
		background-repeat: no-repeat;
		background-position-x: center;
		background-size: cover;
	}
	.seccion-presentation{
		background-color: var(--third);
		top: 100vh;
	}
	.seccion-intro {
		background-image: url(/img/BackgroundImage.png);
		top: 100vh;
	}
	.seccion-our-story {
		background-image: url(/img/FondoPlaya.webp);
		top: 100vh;
	}
	.seccion-info {
		background-image: url(/img/BackgroundImage.png);
		top: 100vh;
	}
	.seccion-dresscode{
		background-image: url(/img/BackgroundImage.png);
		top: 100vh;
	}
	.seccion-lluvia{
		background-image: url(/img/FondoPlayaLluvia.webp);
		top: 100vh;
	}
	.seccion-musica-mensaje{
		background-image: url(/img/BackgroundImage.png);
		top: 100vh;
	}
	.seccion-rsvp{
		background-image: url(/img/BackgroundImage.png);
		top: 0px;
	}

	.move-up{
		top: -100vh;
		transition: all 1s;
	}
	.move-down{
		top: 100vh;
		transition: all 1s;
	}
	.move-center{
		top: 0px;
		transition: all 1s;
	}

	@media (max-width: 1920px){
	}

	@media (max-width: 1366px){
	}

	@media (max-width: 430px){

		.seccion-our-story {
			background-position-x: -104vh;
		}
		.seccion-lluvia{
			background-position-x: -98vh;
		}

	}

</style>
<script src="../../src/htmx.min.js"></script>
<script>
	let touchPositionY: number = 0;
	let touchStartY: number = 0;
	let deltaY: number = 0;

	const debounce = (callback: Function, waitTime: number) => {
		let timerId: ReturnType<typeof setTimeout>;
		let execute = true;
		return () => {
			if(execute) {

				const executed = callback();
				if(executed) {
					execute = false;
				}
			}
			clearTimeout(timerId);
			timerId = setTimeout(() => {
				execute = true;
			}, waitTime) 
		}
	}

	const upOrDown = () : boolean => {
		const currentSection: HTMLElement|null = document.querySelector(`[data-status="active"]`);

		if(!currentSection || !currentSection.getAttribute('data-index')) return false;

		if(deltaY < 0) {
			const nextIndex = +(currentSection.getAttribute('data-index') ?? 1) - 1;
			const nextSection: HTMLElement|null = document.querySelector(`[data-index="${nextIndex}"]`);
			if(!nextSection) return false;
			currentSection.dataset.status = "unknown";
			currentSection.classList.remove('move-center');
			currentSection.classList.add('move-down');
			nextSection.dataset.status = "active";
			nextSection.classList.remove('move-up');
			nextSection.classList.add('move-center');

			return true;
		}
		if(deltaY > 0) {
			const nextIndex = +(currentSection.getAttribute('data-index') ?? -1) + 1;
			const nextSection: HTMLElement|null = document.querySelector(`[data-index="${nextIndex}"]`);
			if(!nextSection) return false;
			currentSection.dataset.status = "unknown";
			currentSection.classList.remove('move-center');
			currentSection.classList.add('move-up');
			nextSection.dataset.status = "active";
			nextSection.classList.remove('move-down');
			nextSection.classList.add('move-center');
			return true;

		}
		return false;
	}

	const debounceUpOrDown = debounce(upOrDown, 500);
	
	const onScroll = (e: WheelEvent) => {
		deltaY = e.deltaY;
		debounceUpOrDown()
	}

	document.addEventListener('wheel', onScroll)

	document.addEventListener('touchstart', (e: TouchEvent) => {
		touchStartY	= e.touches[0].clientY;
	})

	document.addEventListener('touchmove', (e: TouchEvent) => {
		touchPositionY = e.touches[0].clientY;
	})

	document.addEventListener('touchend', () => {
		deltaY = touchStartY - touchPositionY;
		debounceUpOrDown();
	})

</script>